// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "calculator.rpcz.h"
#include "calculator.pb.h"
#include <google/protobuf/descriptor.h>
#include <google/protobuf/stubs/once.h>
#include <rpcz/rpcz.hpp>
namespace {
const ::google::protobuf::ServiceDescriptor* CalculatorService_descriptor_ = NULL;
}  // anonymouse namespace

void rpcz_protobuf_AssignDesc_calculator_2eproto() {
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "calculator.proto");
  GOOGLE_CHECK(file != NULL);
  CalculatorService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &rpcz_protobuf_AssignDesc_calculator_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void rpcz_protobuf_ShutdownFile_calculator_2eproto() {
}

void rpcz_protobuf_AddDesc_calculator_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020calculator.proto\"#\n\007Numbers\022\t\n\001i\030\001 \002(\005"
    "\022\r\n\001j\030\002 \003(\005B\002\020\0012.\n\021CalculatorService\022\031\n\003"
    "Add\022\010.Numbers\032\010.Numbers", 103);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "calculator.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&rpcz_protobuf_ShutdownFile_calculator_2eproto);
}

// ===================================================================

CalculatorService::~CalculatorService() {}

const ::google::protobuf::ServiceDescriptor* CalculatorService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalculatorService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* CalculatorService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalculatorService_descriptor_;
}

void CalculatorService::Add(const ::Numbers&,
                         ::rpcz::reply< ::Numbers> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method Add() not implemented.");
}

void CalculatorService::call_method(const ::google::protobuf::MethodDescriptor* method,
                             const ::google::protobuf::Message& request,
                             ::rpcz::server_channel* channel) {
  GOOGLE_DCHECK_EQ(method->service(), CalculatorService_descriptor_);
  switch(method->index()) {
    case 0:
      Add(
          *::google::protobuf::down_cast<const ::Numbers*>(&request),
          ::rpcz::reply< ::Numbers>(channel));
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& CalculatorService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Numbers::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& CalculatorService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Numbers::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

CalculatorService_Stub::CalculatorService_Stub(::rpcz::rpc_channel* channel,
                                   const ::std::string& service_name,
                                   bool owns_channel)
  : channel_(channel), service_name_(service_name),
    owns_channel_(owns_channel) {}
CalculatorService_Stub::CalculatorService_Stub(::rpcz::rpc_channel* channel,
                                   bool owns_channel)
  : channel_(channel), service_name_(CalculatorService::descriptor()->name()),
    owns_channel_(owns_channel) {}
CalculatorService_Stub::~CalculatorService_Stub() {
  if (owns_channel_) delete channel_;
}

void CalculatorService_Stub::Add(const ::Numbers& request,
                              ::Numbers* response,
                              ::rpcz::rpc* rpc,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        CalculatorService::descriptor()->method(0),
                        request, response, rpc, done);
}
void CalculatorService_Stub::Add(const ::Numbers& request,
                              ::Numbers* response,
                              long deadline_ms) {
  ::rpcz::rpc rpc;
  rpc.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        CalculatorService::descriptor()->method(0),
                        request, response, &rpc, NULL);
  rpc.wait();
  if (!rpc.ok()) {
    throw ::rpcz::rpc_error(rpc);
  }
}
