// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: calculator.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "calculator.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Numbers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Numbers_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_calculator_2eproto() {
  protobuf_AddDesc_calculator_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "calculator.proto");
  GOOGLE_CHECK(file != NULL);
  Numbers_descriptor_ = file->message_type(0);
  static const int Numbers_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Numbers, i_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Numbers, j_),
  };
  Numbers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Numbers_descriptor_,
      Numbers::default_instance_,
      Numbers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Numbers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Numbers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Numbers));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_calculator_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Numbers_descriptor_, &Numbers::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_calculator_2eproto() {
  delete Numbers::default_instance_;
  delete Numbers_reflection_;
}

void protobuf_AddDesc_calculator_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020calculator.proto\"#\n\007Numbers\022\t\n\001i\030\001 \002(\005"
    "\022\r\n\001j\030\002 \003(\005B\002\020\0012.\n\021CalculatorService\022\031\n\003"
    "Add\022\010.Numbers\032\010.Numbers", 103);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "calculator.proto", &protobuf_RegisterTypes);
  Numbers::default_instance_ = new Numbers();
  Numbers::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_calculator_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_calculator_2eproto {
  StaticDescriptorInitializer_calculator_2eproto() {
    protobuf_AddDesc_calculator_2eproto();
  }
} static_descriptor_initializer_calculator_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Numbers::kIFieldNumber;
const int Numbers::kJFieldNumber;
#endif  // !_MSC_VER

Numbers::Numbers()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Numbers)
}

void Numbers::InitAsDefaultInstance() {
}

Numbers::Numbers(const Numbers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Numbers)
}

void Numbers::SharedCtor() {
  _cached_size_ = 0;
  i_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Numbers::~Numbers() {
  // @@protoc_insertion_point(destructor:Numbers)
  SharedDtor();
}

void Numbers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Numbers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Numbers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Numbers_descriptor_;
}

const Numbers& Numbers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_calculator_2eproto();
  return *default_instance_;
}

Numbers* Numbers::default_instance_ = NULL;

Numbers* Numbers::New() const {
  return new Numbers;
}

void Numbers::Clear() {
  i_ = 0;
  j_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Numbers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Numbers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 i = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &i_)));
          set_has_i();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_j;
        break;
      }

      // repeated int32 j = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_j:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_j())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_j())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Numbers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Numbers)
  return false;
#undef DO_
}

void Numbers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Numbers)
  // required int32 i = 1;
  if (has_i()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->i(), output);
  }

  // repeated int32 j = 2 [packed = true];
  if (this->j_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_j_cached_byte_size_);
  }
  for (int i = 0; i < this->j_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->j(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Numbers)
}

::google::protobuf::uint8* Numbers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Numbers)
  // required int32 i = 1;
  if (has_i()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->i(), target);
  }

  // repeated int32 j = 2 [packed = true];
  if (this->j_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _j_cached_byte_size_, target);
  }
  for (int i = 0; i < this->j_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->j(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Numbers)
  return target;
}

int Numbers::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 i = 1;
    if (has_i()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->i());
    }

  }
  // repeated int32 j = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->j_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->j(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _j_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Numbers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Numbers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Numbers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Numbers::MergeFrom(const Numbers& from) {
  GOOGLE_CHECK_NE(&from, this);
  j_.MergeFrom(from.j_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_i()) {
      set_i(from.i());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Numbers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Numbers::CopyFrom(const Numbers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Numbers::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Numbers::Swap(Numbers* other) {
  if (other != this) {
    std::swap(i_, other->i_);
    j_.Swap(&other->j_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Numbers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Numbers_descriptor_;
  metadata.reflection = Numbers_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
